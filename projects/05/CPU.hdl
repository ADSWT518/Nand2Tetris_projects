// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Mind that the rightmost bit of 'instruction' is instruction[0]!!!
    // About C-instrucion:
    // instruction[0..2]    Jump
    // instruction[3]       load to Memory
    // instruction[4]       load to D register
    // instruction[5]       load to A register
    // instruction[6..11]   control bits of ALU
    // instruction[12]      control bit of the 2nd Mux
    // instruction[13..14]  nothing
    // instruction[15]      OP code

    
    // first Mux and A Register
    Mux16(a = instruction, b = ALUoutput, sel = instruction[15], out = Ainput);
    Not(in = instruction[15], out = NotOPcode);

    And(a = instruction[15], b = instruction[5], out = Aload0);    
    Or(a = Aload0, b = NotOPcode, out = Aload); // get the condition for loading to A register 
    And(a = instruction[15], b = instruction[4], out = Dload); // get the condition for loading to D register 
    And(a = instruction[15], b = instruction[3], out = writeM); // get the condition for writing to Memory 

    ARegister(in = Ainput, load = Aload, out = Aoutput, out[15] = OPCode, out[0..14] = addressM);
    Mux16(a = Aoutput, b = inM, sel = instruction[12], out = ALUinput2);

    DRegister(in = ALUoutput, load = Dload, out = Doutput); // Doutput is ALUinput1
    ALU(x = Doutput, y = ALUinput2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUoutput, out = outM, zr = zr, ng = ng);

    // Program Counter
    DMux8Way(in = instruction[15], sel = instruction[0..2], a = NULL, b = JGT, c = JEQ, d = JGE, e = JLT, f = JNE, g = JLE, h = JMP);
    And(a = zr, b = JEQ, out = PCload1); // == 0
        Not(in = zr, out = Notzr);
        Not(in = ng, out = Notng);
        Or(a = zr, b = ng, out = LessOrEq);
        And(a = Notzr, b = Notng, out = Greater);
    And(a = Notzr, b = JNE, out = PCload2); // != 0
    And(a = ng, b = JLT, out = PCload3); // < 0
    And(a = Notng, b = JGE, out = PCload4); // >= 0
    And(a = LessOrEq, b = JLE, out = PCload5); // <= 0
    And(a = Greater, b = JGT, out = PCload6); // > 0
    Not(in = NULL, out = NotNULL);
    myChip(a = PCload1, b = PCload2, c = PCload3, d = PCload4, e = PCload5, f = PCload6, g = JMP, h = NotNULL, out = PCload);
    // 'myChip' is a self-made Chip to output a || b || c || d || e || f || g & h
    Not(in = PCload, out = PCinc);
    

    PC(in = Aoutput, load = PCload, inc = PCinc, reset = reset, out[0..14] = pc, out[15] = OPCode2);
}

//Reference: http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com/Computer-hdl-question-td4031948.html
